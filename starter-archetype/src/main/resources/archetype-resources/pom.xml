#if (${jakartaEEVersion} == '11')
    #set ($eeApiVersion = "11.0.0")
#elseif (${jakartaEEVersion} == '10')
    #set ($eeApiVersion = "10.0.0")
#elseif (${jakartaEEVersion} == '9.1')
    #set ($eeApiVersion = "9.1.0")
#elseif (${jakartaEEVersion} == '9')
    #set ($eeApiVersion = "9.0.0")
#else
    #set ($eeApiVersion = "8.0.0")
#end
#if (${profile} == 'core')
    #set ($eeArtifactId = "jakarta.jakartaee-core-api")
#elseif (${profile} == 'web')
    #set ($eeArtifactId = "jakarta.jakartaee-web-api")
#else
    #set ($eeArtifactId = "jakarta.jakartaee-api")
#end
#if (${jakartaEEVersion} == '8')
    #set ($payaraHome = "payara5")
#else
    #set ($payaraHome = "payara6")
#end
#if (!${payaraVersion})
    #if (${jakartaEEVersion} == '8')
        #set ($payaraVersion = "5.2022.5")
    #else
        #set ($payaraVersion = "6.2024.2")
    #end
#end
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>${groupId}</groupId>
    <artifactId>${artifactId}</artifactId>
    <version>${version}</version>
    <packaging>war</packaging>

    <name>${artifactId}</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
#if (${javaVersion} == '8')
        <maven.compiler.target>1.8</maven.compiler.target>
        <maven.compiler.source>1.8</maven.compiler.source>
#else
        <maven.compiler.release>${javaVersion}</maven.compiler.release>
#end
        <jakartaee-api.version>${eeApiVersion}</jakartaee-api.version>
        <payara.version>${payaraVersion}</payara.version>
#if ((${platform} == 'server'))
        <payara.home>${payaraHome}</payara.home>
#end
    </properties>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>fish.payara.api</groupId>
                <artifactId>payara-bom</artifactId>
                <version>${payara.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
#if (${includeTests} == "true")
            <dependency>
                <groupId>org.jboss.arquillian</groupId>
                <artifactId>arquillian-bom</artifactId>
                <version>1.8.0.Final</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
#end
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>${eeArtifactId}</artifactId>
        #if (${profile} == 'core')
            <version>${jakartaee-api.version}</version>
        #end
            <scope>provided</scope>
        </dependency>
#if (${addConcurrentApi} == "true")
        <dependency>
            <groupId>jakarta.enterprise.concurrent</groupId>
            <artifactId>jakarta.enterprise.concurrent-api</artifactId>
            <scope>provided</scope>
        </dependency>
#end
#if (${addResourceApi} == "true")
        <dependency>
            <groupId>jakarta.resource</groupId>
            <artifactId>jakarta.resource-api</artifactId>
            <scope>provided</scope>
        </dependency>
#end
#if (${addJBatchApi} == "true")
        <dependency>
            <groupId>jakarta.batch</groupId>
            <artifactId>jakarta.batch-api</artifactId>
            <scope>provided</scope>
        </dependency>
#end
#if (${addJcache} == "true")
        <dependency>
            <groupId>javax.cache</groupId>
            <artifactId>cache-api</artifactId>
            <scope>provided</scope>
        </dependency>
#end
#if (${addMicroprofileApi} == "true")
        <dependency>
            <groupId>org.eclipse.microprofile</groupId>
            <artifactId>microprofile</artifactId>
            <scope>provided</scope>
            <type>pom</type>
        </dependency>
#end
#if (${addPayaraApi} == "true")
        <dependency>
            <groupId>fish.payara.api</groupId>
            <artifactId>payara-api</artifactId>
            <scope>provided</scope>
        </dependency>
#end
#if (${auth} == "formAuthLDAP")
        <dependency>
            <groupId>com.unboundid</groupId>
            <artifactId>unboundid-ldapsdk</artifactId>
            <version>6.0.1</version>
        </dependency>
#end
#if (${includeTests} == "true")
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version> 
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <version>1.8.0.Final</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.testenricher</groupId>
            <artifactId>arquillian-testenricher-resource</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Client-side JAXRS client to be used by test -->
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-client</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Standalone jersey usage requires injection implementation, default is HK2 -->
        <dependency>
            <groupId>org.glassfish.jersey.inject</groupId>
            <artifactId>jersey-hk2</artifactId>
            <scope>test</scope>
        </dependency>
#end
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.4.0</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
#if ((${platform} == 'micro'))
            <!-- Execute 'mvn clean package payara-micro:dev' to run the application. -->
            <plugin>
                <groupId>fish.payara.maven.plugins</groupId>
                <artifactId>payara-micro-maven-plugin</artifactId>
#if (${javaVersion} == '8')
                <version>2.0</version>
#else
                <version>2.4</version>
#end
                <configuration>
                    <payaraVersion>${payara.version}</payaraVersion>
#if (${deployWar} == "true")
                    <deployWar>true</deployWar>
#end
#if (${autoBindHttp} == "true")
                    <commandLineOptions>
                        <option>
                            <key>--autoBindHttp</key>
                        </option>
                    </commandLineOptions>
#end
                    <contextRoot>${contextRoot}</contextRoot>
                </configuration>
            </plugin>
#else
            <!-- Execute 'mvn clean package payara-server:dev' to run the application. -->
            <plugin>
                    <groupId>fish.payara.maven.plugins</groupId>
                    <artifactId>payara-server-maven-plugin</artifactId>
                    <version>1.0.0-Alpha2</version>
                    <configuration>
                        <payaraServerVersion>${payara.version}</payaraServerVersion>
                    </configuration>
            </plugin>
#end
#if (${cloud} == "true")
            <!-- Execute 'mvn clean package payara-cloud:dev' to run the application in Payara Cloud. -->
            <plugin>
                <groupId>fish.payara.maven.plugins</groupId>
                <artifactId>payara-cloud-maven-plugin</artifactId>
                <version>1.0-Alpha4</version>
            </plugin>
#end
#if (${includeTests} == "true")
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.2.5</version>
                <configuration>
                    <systemPropertyVariables>
#if ((${platform} == 'server'))
                        <payara.home>${payara.home}</payara.home>
#else
                        <payara.microJar>${project.build.directory}/payara-micro-${payara.version}.jar</payara.microJar>
#end
                    </systemPropertyVariables>
                </configuration>
            </plugin>
#end
#if (${docker} == "true")
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.44.0</version>
                <executions>
                    <execution>
                        <id>build-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <images>
                        <image>
                            <name>${project.artifactId}:${project.version}</name>
                        </image>
                    </images>
                </configuration>
            </plugin>
#end
#if (${mpOpenAPI} == "true")
            <plugin>
                <groupId>com.googlecode.maven-download-plugin</groupId>
                <artifactId>download-maven-plugin</artifactId>
                <version>1.9.0</version>
                <executions>
                    <execution>
                        <id>swagger-ui</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <skipCache>true</skipCache>
                            <url>https://github.com/swagger-api/swagger-ui/archive/master.tar.gz</url>
                            <unpack>true</unpack>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
                <executions>
                    <execution>
                        <id>copy-swagger-resources</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/${project.artifactId}-${project.version}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.build.directory}/swagger-ui-master/dist</directory>
                                    <filtering>true</filtering>
                                    <excludes>
                                        <exclude>index.html</exclude>
                                    </excludes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
#end
        </plugins>
    </build>
    
    <repositories>
        <repository>
            <id>payara-nexus-artifacts</id>
            <url>https://nexus.dev.payara.fish/repository/payara-artifacts</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    
    
    <profiles>
#if ((${includeTests} == "true") && (${platform} == 'server'))
        <profile>
            <!--
            This profile will install a Payara server and start up the server per sample.
            The Payara version that's used can be set via the payara.version property.
            This is the default profile and does not have to be specified explicitly.
            -->
            <id>payara-server-managed</id>

            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <payara.domain.name>domain1</payara.domain.name>
                <payara.directory.name>${payara.home}</payara.directory.name>
            </properties>

            <dependencies>

                <!-- Rely on the distribution to make sure it builds after the distributions -->
                <dependency>
                    <groupId>fish.payara.distributions</groupId>
                    <artifactId>payara</artifactId>
                    <type>zip</type>
                    <optional>true</optional>
                </dependency>

                <!-- The actual Arquillian connector -->
                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>arquillian-payara-server-managed</artifactId>
                    <scope>test</scope>
                    <optional>true</optional>
                </dependency>
            </dependencies>

            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-clean-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>delete-server</id>
                                <inherited>false</inherited>
                                <goals>
                                    <goal>clean</goal>
                                </goals>
                                <phase>clean</phase>
                                <configuration>
                                    <filesets>
                                        <fileset>
                                            <directory>${session.executionRootDirectory}/target</directory>
                                        </fileset>
                                    </filesets>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>unpack</id>
                                <phase>process-test-classes</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${session.executionRootDirectory}/target</outputDirectory>
                                    <markersDirectory>${session.executionRootDirectory}/target/dependency-maven-plugin-markers</markersDirectory>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>fish.payara.distributions</groupId>
                                            <artifactId>payara</artifactId>
                                            <version>${payara.version}</version>
                                            <type>zip</type>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${session.executionRootDirectory}/target</outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>payara-server-remote</id>
            <!--
            This profile requires you to start up a Payara server outside of the build.
            Each sample will then reuse this instance to run the tests.
            -->
            <dependencies>
                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>arquillian-payara-server-remote</artifactId>
                    <scope>test</scope>
                    <optional>true</optional>
                </dependency>
            </dependencies>
        </profile>
#end
#if ((${includeTests} == "true") && (${platform} == 'micro'))
        <profile>
            <id>payara-micro-managed</id>
            <!--
            This profile will install a Payara Micro and start up the server per sample.
            The Payara version that's used can be set via the payara.version property.
            -->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <payara.containerType>MICRO</payara.containerType>
            </properties>

            <dependencies>
                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>arquillian-payara-micro-managed</artifactId>
                    <scope>test</scope>
                    <optional>true</optional>
                </dependency>
            </dependencies>

            <build>
                <plugins>
                    <!-- Download Payara Micro and copy to target directory -->
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>process-test-classes</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>fish.payara.extras</groupId>
                                            <artifactId>payara-micro</artifactId>
                                            <version>${payara.version}</version>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${session.executionRootDirectory}/target/</outputDirectory>
                                            <destFileName>payara-micro-${payara.version}.jar</destFileName>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
#end
    </profiles>


</project>
